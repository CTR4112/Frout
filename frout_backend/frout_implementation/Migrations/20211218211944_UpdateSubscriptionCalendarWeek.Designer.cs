// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using frout_implementation.Infrastructure.DAL;

namespace frout_implementation.Migrations
{
    [DbContext(typeof(FroutDbContext))]
    [Migration("20211218211944_UpdateSubscriptionCalendarWeek")]
    partial class UpdateSubscriptionCalendarWeek
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.6");

            modelBuilder.Entity("frout_implementation.Domain.Model.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("frout_implementation.Domain.Model.Farmer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Farmers");
                });

            modelBuilder.Entity("frout_implementation.Domain.Model.Offering", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Additional_Information")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("FarmerId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.HasIndex("FarmerId");

                    b.ToTable("Offerings");
                });

            modelBuilder.Entity("frout_implementation.Domain.Model.Subscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("FarmerId")
                        .HasColumnType("int");

                    b.Property<int>("NextDeliveryCalendarWeek")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("FarmerId");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("frout_implementation.Domain.Model.SubscriptionDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("OfferingId")
                        .HasColumnType("int");

                    b.Property<int?>("SubscriptionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OfferingId");

                    b.HasIndex("SubscriptionId");

                    b.ToTable("SubscriptionDetails");
                });

            modelBuilder.Entity("frout_implementation.Domain.Model.Customer", b =>
                {
                    b.OwnsOne("frout_implementation.Domain.Model.ValueObjects.Location", "Location", b1 =>
                        {
                            b1.Property<int>("CustomerId")
                                .HasColumnType("int");

                            b1.Property<double>("Latitude")
                                .HasColumnType("double")
                                .HasColumnName("Location_Latitude");

                            b1.Property<double>("Longitude")
                                .HasColumnType("double")
                                .HasColumnName("Location_Longitude");

                            b1.HasKey("CustomerId");

                            b1.ToTable("Customers");

                            b1.WithOwner()
                                .HasForeignKey("CustomerId");
                        });

                    b.Navigation("Location");
                });

            modelBuilder.Entity("frout_implementation.Domain.Model.Farmer", b =>
                {
                    b.OwnsOne("frout_implementation.Domain.Model.ValueObjects.Location", "Location", b1 =>
                        {
                            b1.Property<int>("FarmerId")
                                .HasColumnType("int");

                            b1.Property<double>("Latitude")
                                .HasColumnType("double")
                                .HasColumnName("Location_Latitude");

                            b1.Property<double>("Longitude")
                                .HasColumnType("double")
                                .HasColumnName("Location_Longitude");

                            b1.HasKey("FarmerId");

                            b1.ToTable("Farmers");

                            b1.WithOwner()
                                .HasForeignKey("FarmerId");
                        });

                    b.Navigation("Location");
                });

            modelBuilder.Entity("frout_implementation.Domain.Model.Offering", b =>
                {
                    b.HasOne("frout_implementation.Domain.Model.Farmer", "Farmer")
                        .WithMany()
                        .HasForeignKey("FarmerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Farmer");
                });

            modelBuilder.Entity("frout_implementation.Domain.Model.Subscription", b =>
                {
                    b.HasOne("frout_implementation.Domain.Model.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("frout_implementation.Domain.Model.Farmer", "Farmer")
                        .WithMany()
                        .HasForeignKey("FarmerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Farmer");
                });

            modelBuilder.Entity("frout_implementation.Domain.Model.SubscriptionDetail", b =>
                {
                    b.HasOne("frout_implementation.Domain.Model.Offering", "Offering")
                        .WithMany("SubscriptionDetails")
                        .HasForeignKey("OfferingId");

                    b.HasOne("frout_implementation.Domain.Model.Subscription", "Subscription")
                        .WithMany("SubscriptionDetails")
                        .HasForeignKey("SubscriptionId");

                    b.Navigation("Offering");

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("frout_implementation.Domain.Model.Offering", b =>
                {
                    b.Navigation("SubscriptionDetails");
                });

            modelBuilder.Entity("frout_implementation.Domain.Model.Subscription", b =>
                {
                    b.Navigation("SubscriptionDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
